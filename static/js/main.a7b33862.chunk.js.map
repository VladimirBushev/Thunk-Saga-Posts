{"version":3,"sources":["redux/types.js","redux/actions.js","components/Loader.jsx","components/Post.jsx","components/FetchedPosts.jsx","components/Alert.jsx","components/PostForm.jsx","components/Posts.jsx","App.jsx","redux/appReducer.js","redux/postsReducer.js","redux/rootReducer.js","reportWebVitals.js","redux/middleware.js","redux/sagas.js","index.js"],"names":["CREATE_POST","FETCH_POSTS","SHOW_LOADER","HIDE_LOADER","SHOW_ALERT","HIDE_ALERT","REQUEST_POSTS","hideLoader","type","showAlert","text","dispatch","payload","setTimeout","Loader","className","role","Post","post","title","FetchedPosts","useDispatch","posts","useSelector","state","fetchedPosts","app","loading","length","map","id","onClick","Alert","PostForm","props","changeInputHandler","event","setState","prev","target","name","value","submitHandler","preventDefault","trim","newPost","Date","now","toString","createPost","onSubmit","this","alert","htmlFor","onChange","React","Component","mapDispatchToProps","connect","syncPosts","App","initialState","rootReducer","combineReducers","action","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","forbidden","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","next","filter","w","includes","window","__REDUX_DEVTOOLS_EXTENSION__","run","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7b33862.chunk.js","sourcesContent":["export const CREATE_POST = 'POSTS/CREATE_POST'\r\nexport const FETCH_POSTS = 'POSTS/FETCH_POSTS'\r\nexport const SHOW_LOADER = 'APP/SHOW_LOADER'\r\nexport const HIDE_LOADER = 'APP/HIDE_LOADER'\r\nexport const SHOW_ALERT = 'APP/SHOW_ALERT'\r\nexport const HIDE_ALERT = 'APP/HIDE_ALERT'\r\nexport const REQUEST_POSTS = 'APP/REQUEST_POSTS'","import { CREATE_POST, FETCH_POSTS, HIDE_ALERT, HIDE_LOADER, REQUEST_POSTS, SHOW_ALERT, SHOW_LOADER } from \"./types\"\r\n\r\nexport const createPost = (post) => {\r\n    return {\r\n        type: CREATE_POST,\r\n        payload: post\r\n    }\r\n}\r\n\r\nexport const fetchPosts = () => {\r\n    return {\r\n        type: REQUEST_POSTS\r\n    }\r\n    // return async dispatch => {\r\n    //     try {\r\n    //         dispatch(showLoader())\r\n    //         const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=10') \r\n    //         const json = await response.json()\r\n    //         setTimeout(() => {\r\n    //             dispatch({type: FETCH_POSTS, payload: json})\r\n    //             dispatch(hideLoader())\r\n    //         }, 500)\r\n    //     } catch (e) {\r\n    //         dispatch(showAlert('Что-то пошло не так'))\r\n    //         dispatch(hideLoader())\r\n    //     }\r\n    // }\r\n}\r\n\r\nexport function showLoader() {\r\n    return {\r\n        type: SHOW_LOADER\r\n    }\r\n}\r\n\r\nexport function hideLoader() {\r\n    return {\r\n        type: HIDE_LOADER\r\n    }\r\n}\r\n\r\nexport function showAlert(text) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: text\r\n        })\r\n\r\n        setTimeout(() => dispatch(hideAlert()), 3000)\r\n    }\r\n}\r\n\r\nexport function hideAlert() {\r\n    return {\r\n        type: HIDE_ALERT\r\n    }\r\n}","export default function Loader() {\r\n    return (\r\n        <div className=\"spinner-border text-primary\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Post({post}) {\r\n    return (\r\n        <div className='card'>\r\n            <div className=\"card-body\">\r\n            <h5 className='card-title'>{post.title}</h5>\r\n            </div>   \r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchPosts } from '../redux/actions'\r\nimport Loader from './Loader'\r\nimport Post from './Post'\r\n\r\nexport default function FetchedPosts() {\r\n    const dispatch = useDispatch()\r\n    const posts = useSelector(state => state.posts.fetchedPosts)\r\n    const loading = useSelector(state => state.app.loading)\r\n    if (loading) {\r\n        \r\n        return <Loader />\r\n    }\r\n\r\n    if (!posts.length) {\r\n        return <button className='btn btn-primary' onClick={() => dispatch(fetchPosts())}>Загрузить</button>\r\n    }\r\n    return posts.map(post => <Post post={post} key={post.id} />)\r\n}\r\n\r\n","export default function Alert({text}) {\r\n    return (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n            {text}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { createPost, showAlert } from '../redux/actions'\r\nimport Alert from './Alert'\r\n\r\nclass PostForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    changeInputHandler = event => {\r\n        this.setState(prev => ({...prev, ...{\r\n            [event.target.name]: event.target.value\r\n        }}))\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault()\r\n        const {title} = this.state\r\n        if(!title.trim()){\r\n            return this.props.showAlert('Название поста не может быть пустым')\r\n        }\r\n        const newPost = {\r\n            title, id: Date.now().toString( )\r\n        }\r\n        this.props.createPost(newPost)\r\n        this.setState({title: ''})\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitHandler}>\r\n                {this.props.alert && <Alert text={this.props.alert} />}\r\n                <label htmlFor='title' className='form-label'>Заголовок поста</label>\r\n                <input \r\n                type='text'\r\n                id='title'\r\n                onChange={this.changeInputHandler}\r\n                value={this.state.title} \r\n                className='form-control'\r\n                name='title'\r\n                />\r\n                <button className='btn btn-success mt-3' type='submit'>Опубликовать</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost, showAlert\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        alert: state.app.alert\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm)","import React from 'react'\r\nimport Post from './Post'\r\nimport {connect} from 'react-redux'\r\n\r\nconst Posts = ({syncPosts}) => {\r\n    if(!syncPosts.length) {\r\n        return <p className='text-centr'>Постов нет</p>\r\n    }\r\n    return syncPosts.map(post => <Post post={post} key={post.id}/>)\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        syncPosts: state.posts.posts\r\n    }    \r\n}\r\nexport default connect(mapStateToProps, null)(Posts)","import FetchedPosts from \"./components/FetchedPosts\";\nimport PostForm from \"./components/PostForm\";\nimport Posts from \"./components/Posts\";\n\nfunction App() {\n    return (\n        <div className=\"container pt-3\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <PostForm />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                <h2>Синнхронные посты</h2>\n\n                    <Posts />\n                </div>\n                <div className=\"col\">\n                    <h2>Асиннхронные посты</h2>\n                    <FetchedPosts/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { HIDE_ALERT, HIDE_LOADER, SHOW_ALERT, SHOW_LOADER } from \"./types\"\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    alert: null,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SHOW_LOADER:\r\n            return { ...state, loading: true }\r\n        case HIDE_LOADER:\r\n            return { ...state, loading: false }\r\n        case SHOW_ALERT:\r\n            return { ...state, alert: action.payload }\r\n        case HIDE_ALERT:\r\n            return { ...state, alert: null }\r\n        default: return state\r\n    }\r\n}","import { CREATE_POST, FETCH_POSTS } from \"./types\"\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    fetchedPosts: []\r\n}\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CREATE_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, action.payload]\r\n            }\r\n        case FETCH_POSTS: \r\n            return {\r\n                ...state, \r\n                fetchedPosts: action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { appReducer } from \"./appReducer\";\r\nimport { postsReducer } from \"./postsReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    posts: postsReducer,\r\n    app: appReducer\r\n})","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { showAlert } from \"./actions\"\r\nimport { CREATE_POST } from \"./types\"\r\n\r\nconst forbidden = ['fuck', 'spam', 'php']\r\n\r\nexport function forbiddenWordsMiddleware({dispatch}) {\r\n    return function(next) {\r\n        return function(action) {\r\n            if (action.type === CREATE_POST) {\r\n                const found = forbidden.filter(w => action.payload.title.includes(w))\r\n                if (found.length) {\r\n                    return dispatch(showAlert('Вы спамер!!!'))\r\n                }\r\n            }\r\n            return next(action)\r\n        }\r\n    } \r\n}","import { call, put, takeEvery } from 'redux-saga/effects'\r\nimport { hideLoader, showAlert, showLoader } from './actions'\r\nimport { FETCH_POSTS, REQUEST_POSTS } from './types'\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(REQUEST_POSTS, sagaWorker)\r\n}\r\n\r\nfunction* sagaWorker() {\r\n    try {\r\n        yield put(showLoader())\r\n        const payload = yield call(fetchPosts)\r\n        yield put({ type: FETCH_POSTS, payload })\r\n        yield put(hideLoader())\r\n    } catch (e) {\r\n        yield put(showAlert('Что-то пошло не так!!!'))\r\n        yield put(hideLoader())\r\n    }\r\n\r\n}\r\n\r\nasync function fetchPosts() {\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=10')\r\n    return await response.json()\r\n}","import React from 'react';\nimport {render} from 'react-dom';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport App from './App.jsx';\nimport { rootReducer } from './redux/rootReducer.js';\nimport {Provider} from 'react-redux'\nimport reportWebVitals from './reportWebVitals';\nimport thunk from 'redux-thunk';\nimport { forbiddenWordsMiddleware } from './redux/middleware.js';\nimport createSagaMiddleware from 'redux-saga'\nimport { sagaWatcher } from './redux/sagas.js';\n\nconst saga = createSagaMiddleware()\n\nconst store = createStore(rootReducer, compose(applyMiddleware(\n  thunk, forbiddenWordsMiddleware, saga\n),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nsaga.run(sagaWatcher)\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}